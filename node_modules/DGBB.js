"use strict";
require('colors');

module.exports = {

	onSocketMessage: function(ewd) {
		var U = '^';
		var wsMsg = ewd.webSocketMessage;
		var type = wsMsg.type;
		var params = wsMsg.params;
		var sessid = ewd.session.$('ewd_sessid')._value;


		if (type == 'loadBB'){
			// Get Site Name via $$SITE^VASITE($$NOW^XLFDT);
			var now = ewd.mumps.function('NOW^XLFDT');
			var va_site = ewd.mumps.function('SITE^VASITE', now);
			var site_name = va_site.split(U)[1];

			// Get ACTIVE ONLY wards via the lister
			var wards = ewd.mumps.function("LIST^KBANFMWR",42,"","@;.01","PQ","","","","B","S D0=Y D WIN^DGPMDDCF I 'X","");
			wards = JSON.parse(wards); // conv fake to real JSON

			wards.display = []; // return array to the browser

			var wardData = {};

			// Walk through each ward
			for (var i in wards.data) {
				console.log(wards.data[i]);

				// Prep the return array
				//wardData.wardName = wards.data[i].split(U)[1];
				var wardName = wards.data[i].split(U)[1];
				wardData[wardName] = [];


				var wardien = wards.data[i].split(U)[0];	// Ward IEN
				var bedfile = new ewd.mumps.GlobalNode('DG',[405.4]); // Fileman file that is.

				// Loop through bed index to pull out all beds for this ward
				bedfile.$("W").$(wardien)._forEach(function (sub, node) {
					// Prep return data
					var individualBedData = {};

					var bedien = sub;
					var bedZeroNodeValue = bedfile.$(bedien).$(0)._value;
					if (!bedZeroNodeValue) return;
					console.log(bedZeroNodeValue.red);
					var bedName = bedZeroNodeValue.split(U)[0];
					individualBedData.bedName = bedName;

					// Out of Service?
					var oos = bedOutOfService(bedien)
					if (oos) individualBedData.OOS = oos;

					// Now find out if the bed is occupied by a patient
					var admissionIndex = new ewd.mumps.GlobalNode('DGPM',['ARM',bedien]);
					var admien = admissionIndex._next(0);

					if (admien) // Occupied!!
					{
						var lodger = (admissionIndex.$(admien)._value > 0);  // Lodger is Mneumonic type index
						var admissionNode = new ewd.mumps.GlobalNode('DGPM',[admien, 0])._value; 
						if (!admissionNode) return; // corrupt data
						//console.log(admissionNode.yellow);

						var DFN = admissionNode.split(U)[2];
						var ptZeroNode = new ewd.mumps.GlobalNode('DPT',[DFN, 0])._value;
						var name = ptZeroNode.split(U)[0];
						var sex = ptZeroNode.split(U)[1];

						var admissionDate = ewd.mumps.function('FMTE^XLFDT',admissionNode.split(U)[0]);

						individualBedData.DFN = DFN;
						individualBedData.name = name;
						individualBedData.sex = sex;
						individualBedData.admissionDate = admissionDate;
						individualBedData.lodger = lodger;
					}
					wardData[wardName].push(individualBedData);
				});
				//console.log(JSON.stringify(wardData).yellow);

				//wards.display.push(wardData);
			}

			// Loop through inpatients to find patients without a bed
			// in ^DPT("CN" then ditto for lodgers in ^DPT("LD"
			var indexes = [ 'CN', 'LD' ];
			for (var ix in indexes) {
				var index = new ewd.mumps.GlobalNode('DPT', [indexes[ix]]);
				index._forEach(function (i,node1) {
					index.$(i)._forEach(function (j,node2) {
						var admien = index.$(i).$(j)._value; //admission IEN in ^DGPM
						var DFN = j;
						var bed = new ewd.mumps.GlobalNode('DPT', [DFN, .101])._value; // bed information
						if (bed) return; // we want patients w/o a bed
						var wardName = new ewd.mumps.GlobalNode('DPT', [DFN, .1])._value; // ward

						var admissionNode = new ewd.mumps.GlobalNode('DGPM',[admien, 0])._value; 
						if (!admissionNode) return; // corrupt data

						var ptZeroNode = new ewd.mumps.GlobalNode('DPT',[DFN, 0])._value;
						var name = ptZeroNode.split(U)[0];
						var sex = ptZeroNode.split(U)[1];

						var admissionDate = ewd.mumps.function('FMTE^XLFDT',admissionNode.split(U)[0]);
						
						var individualBedData = {};
						individualBedData.bedName = null;
						individualBedData.DFN = DFN;
						individualBedData.name = name;
						individualBedData.sex = sex;
						individualBedData.admissionDate = admissionDate;
						individualBedData.lodger = indexes[ix] == 'CN' ? false : true;
						
						// Just in case the patient is in a ward that closed!!
						// (remember we only captured active ward upwards)
						if (!wardData[wardName]) wardData[wardName] = [];
						
						wardData[wardName].push(individualBedData);
					});
				});
			}

			return wardData;

			/*
			   if (!params.start) return '';
			   ixB._forPrefix(params.start, function(name, node) {
			   var ien = node._next('');
			   var zeroNode = new ewd.mumps.GlobalNode('DPT', [ien, 0]);
			   console.log(zeroNode._value.green);
			   matches.push(zeroNode._value);
			   });
			   */
			//return {savedInto: 'KBANMSG'};
			ewd.sendWebSocketMsg({
				type: 'myMessage',
				message: {
					name: 'Rob',
					gender: 'male',
					address: {
						town: 'Reigate',
						country: 'UK'
					}
				}
			});

			//return wards.display;
		}

		/* Finds out if a bed is inactivated */
		/* Returns message if inactivated; empty str if not */
		function bedOutOfService(bedien) {
			// First OOS date in the inverse index is the latest
			var index = new ewd.mumps.GlobalNode ('DG',[ 405.4,bedien,"I","AINV" ]);

			var firstInverseDate = index._next(0);
			if (!firstInverseDate) return "";
			//console.log(firstInverseDate.toString().yellow);

			var ifn = index.$(firstInverseDate)._next(0);

			var zeronode = new ewd.mumps.GlobalNode ('DG', [405.4,bedien,"I",ifn,0])._value;

			if (!zeronode) return "";

			var outOfServiceDate = zeronode.split(U)[0];
			var reActivationDate = zeronode.split(U)[3];
			var now = ewd.mumps.function('NOW^XLFDT');

			//console.log(outOfServiceDate, reActivationDate, now);

			if (outOfServiceDate > now) return "";

			if (reActivationDate && (reActivationDate <= now)) return "";

			// now we are sure bed is inactive
			var reasonIFN = zeronode.split(U)[1];
			var reason = ewd.mumps.function('GET1^DIQ',405.5, reasonIFN, .01);

			var comment = zeronode.split(U)[2];

			return reason + ' -- ' + comment;
		}
	}
};
